---
description:
globs:
alwaysApply: false
---
# State Management Guide

This project follows these patterns for managing state in components and across the application.

## Component-Level State
- Use React's `useState` hook for simple component state
- For complex state logic, prefer `useReducer`
- Use state initialization with default values

```tsx
// Example:
const [isOpen, setIsOpen] = useState<boolean>(false);
```

## Context API Usage
- Use React Context for global state that needs to be accessed by multiple components
- Create context providers in [src/app/providers](mdc:src/app/providers)
- Create custom hooks to access context values

## Data Fetching
- Use Next.js data fetching patterns appropriately
- For client-side data needs, use custom hooks like [src/hooks/useGitHubProjects.ts](mdc:src/hooks/useGitHubProjects.ts)
- Handle loading and error states explicitly

## Forms and User Input
- Use controlled components for form inputs
- Validate user input before submission
- Provide appropriate error feedback

## Performance Considerations
- Use `useMemo` for expensive calculations
- Use `useCallback` for frequently recreated functions, especially those passed to child components
- Use `React.memo` for components that re-render frequently due to parent re-renders
