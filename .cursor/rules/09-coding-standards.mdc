---
description:
globs:
alwaysApply: false
---
# Coding Standards

This project follows specific coding standards for consistency and maintainability.

## TypeScript
- Use explicit types for function parameters and return values
- Avoid using `any` type
- Use interfaces for complex object structures
- Use type inference where appropriate

## Component Structure
- Follow functional component pattern with arrow functions
- Extract reusable logic into custom hooks
- Use appropriate Props interfaces for each component
- Maintain single responsibility principle

## Styling
- Use TailwindCSS utility classes in component JSX
- For complex animations, use Framer Motion
- Extract reusable styles into utility classes

## Imports
- Group imports by:
  1. React and Next.js imports
  2. Third-party libraries
  3. Internal components
  4. Types, hooks, and utilities

## Naming Conventions
- Components: PascalCase
- Files: PascalCase for components, camelCase for utilities and hooks
- Functions: camelCase
- Constants: UPPER_SNAKE_CASE for truly constant values
- Interfaces: Prefix with 'I' (e.g., IComponentProps)
