---
description: 
globs: 
alwaysApply: false
---
# Performance Optimization Guide

The portfolio follows modern performance optimization techniques to ensure a smooth user experience.

## Component Optimization
- [src/components/LazySection.tsx](mdc:src/components/LazySection.tsx) - Lazy loads sections as they approach the viewport
- Dynamic imports in [src/app/page.tsx](mdc:src/app/page.tsx) for code splitting
- Memoization of expensive calculations with React.useMemo and React.useCallback

## Image Optimization
- Next.js Image component for automatic optimization
- Proper sizing and formats for all images
- Loading priority for above-the-fold images

## Animation Performance
- GPU-accelerated properties for animations
- Reduced motion for users who prefer less animation
- [src/components/ClientLayout.tsx](mdc:src/components/ClientLayout.tsx) - Manages client-side effects efficiently

## Loading States
- Clean loading placeholders that match design aesthetic
- Progressive enhancement approach
- Optimized initial page load with minimal dependencies

## Core Web Vitals Focus
The site is optimized for Core Web Vitals:
1. Largest Contentful Paint (LCP) - prioritizes critical content loading
2. First Input Delay (FID) - minimizes JavaScript blocking
3. Cumulative Layout Shift (CLS) - prevents unexpected layout shifts

## Network Optimization
- JavaScript and CSS minification
- Efficient asset loading with appropriate preloading
- Reduced dependency size where possible

## Best Practices
- Using production builds for deployment
- Server-side rendering where appropriate
- Optimized state management to prevent unnecessary renders
- Clean CSS with minimal unused styles
