---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Hero from '../components/Hero.astro';
import About from '../components/About.astro';
import Projects from '../components/Projects.astro';
import Contact from '../components/Contact.astro';
---

<Layout title="DaCrab | Swiss Design Portfolio">
  <main class="main-content">
    <Navigation />
    <Hero />
    <About />
    <Projects />
    <Contact />
  </main>
</Layout>



<script>
  // Global app initialization
  document.addEventListener('DOMContentLoaded', () => {
    // Add loading complete class to body
    document.body.classList.add('loaded');
    
    // Performance optimization: preload critical resources
    const criticalImages = [
      '/gsm/home-en.png',
      '/argicon/en-home.png',
      '/designdash/home-en.png'
    ];
    
    criticalImages.forEach(src => {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'image';
      link.href = src;
      document.head.appendChild(link);
    });
    
    // Smooth scrolling enhancement for better control
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault();
        const link = e.target as HTMLAnchorElement;
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = targetId ? document.getElementById(targetId) : null;
        
        if (targetElement) {
          const navHeight = 80; // Height of fixed navigation
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - navHeight;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
    
    // Add intersection observer for revealing content
    const revealElements = document.querySelectorAll('section');
    const revealObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    revealElements.forEach(el => {
      el.classList.add('reveal-element');
      revealObserver.observe(el);
    });
    
    // Performance monitoring
    if ('PerformanceObserver' in window) {
      const perfObserver = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          // Log performance metrics for development
          if (entry.entryType === 'navigation') {
            const navEntry = entry as PerformanceNavigationTiming;
            console.log(`Page loaded in ${navEntry.loadEventEnd - navEntry.fetchStart}ms`);
          }
        });
      });
      
      perfObserver.observe({ entryTypes: ['navigation'] });
    }
  });
</script>


