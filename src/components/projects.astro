---
import { Image } from "astro:assets";
import { projects } from "@/data/projects";
import SectionHeader from "./section-header.astro";
---

<section id="projects" class="swiss-section scroll-offset">
  <div class="section-number" aria-hidden="true">03</div>
  <div class="swiss-container">
    <SectionHeader
      eyebrow="Selected work"
      title="Projects"
      description="Minimal case cards with quick preview and gallery."
    />

    <div class="proj-grid">
      {
        projects.map((p) => {
          const gallery = JSON.stringify(
            p.gallery.map((img) => ({
              src: img.src,
              w: img.width,
              h: img.height,
            })),
          );
          return (
            <article
              class="proj-card"
              data-project={p.id}
              data-gallery={gallery}
              data-title={p.title}
              data-meta={p.meta}
            >
              <span class="proj-index">0{p.id}</span>
              <button
                class="cover"
                type="button"
                data-gallery-open
                aria-label={`Open ${p.title} screenshots`}
              >
                <Image
                  src={p.cover}
                  alt={`${p.title} home cover`}
                  loading="lazy"
                />
                <span class="count">{p.gallery.length}</span>
              </button>
              <div class="card-body">
                <h3 class="proj-title swiss-heading-4">{p.title}</h3>
                <p class="proj-meta swiss-caption">{p.meta}</p>
                <p class="blurb">{p.blurb}</p>
                <div class="tech-chips">
                  {p.tech.map((t) => (
                    <span class="chip u-caps u-track-10">{t}</span>
                  ))}
                </div>
              </div>
              <div class="mini">
                <a
                  href={p.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="visit swiss-button swiss-button-outline swiss-button-sm"
                  aria-label={`Visit ${p.title} (opens in new tab)`}
                >
                  <span>Visit</span>
                  <svg
                    width="14"
                    height="14"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <path
                      d="M7 17L17 7M10 7H17V14"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </a>
                <button
                  class="swiss-button swiss-button-primary swiss-button-sm"
                  type="button"
                  data-gallery-open
                  aria-label={`Open ${p.title} gallery`}
                >
                  <svg
                    width="14"
                    height="14"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <>
                      <path
                        d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12Z"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                      <circle
                        cx="12"
                        cy="12"
                        r="3"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </>
                  </svg>
                  <span>Gallery</span>
                </button>
              </div>
            </article>
          );
        })
      }
    </div>

    <!-- Gallery dialog (global .gd styles) -->
    <dialog
      id="gallery-dialog"
      class="gd"
      aria-modal="true"
      role="dialog"
      aria-labelledby="gd-title"
    >
      <div class="gd-wrap">
        <header class="gd-head">
          <div class="gd-head-left">
            <h3 id="gd-title" class="gd-title">Gallery</h3>
            <div id="gd-meta" class="gd-meta"></div>
          </div>
          <div class="gd-tabs" id="gd-tabs">
            <button type="button" class="gd-tab u-caps-xs-10 active" data-lang="en">EN</button>
            <button type="button" class="gd-tab u-caps-xs-10" data-lang="el">GR</button>
          </div>
          <button
            type="button"
            class="gd-close u-caps-xs"
            data-gd-close
            aria-label="Close gallery">Close</button
          >
        </header>
        <div class="gd-stage" id="gd-stage" tabindex="-1">
          <img id="gd-image" alt="" />
        </div>
        <div class="gd-foot">
          <div class="gd-thumbs" id="gd-thumbs" aria-label="Gallery thumbnails">
          </div>
        </div>
      </div>
    </dialog>

    <div class="current-work-section">
      <div class="section-divider">
        <div class="divider-line"></div>
        <h3 class="swiss-heading-3">What I'm building now</h3>
        <div class="divider-line"></div>
        <div class="divider-accent" aria-hidden="true"></div>
      </div>
      <div class="work-header">
        <span class="work-badge u-caps-xs-10" aria-hidden="true">LIVE</span>
      </div>
      <div
        class="current-work-grid"
        id="current-work-grid"
        aria-live="polite"
      >
        <div class="loading-spinner">Fetching latest repositories…</div>
      </div>
    </div>
  </div>
</section>

<script>
  // @ts-nocheck

  // Initialize projects functionality
  document.addEventListener("DOMContentLoaded", () => {
    if (window.__projectsInit) return;
    window.__projectsInit = true;

    initProjectsObserver();
    fetchCurrentWork();
    initGallery();
  });

  function initProjectsObserver() {
    try {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((e) => {
            if (e.isIntersecting) e.target.classList.add("animate-in");
          });
        },
        { threshold: 0.12, rootMargin: "0px 0px -10% 0px" },
      );
      document
        .querySelectorAll(".proj-card, .current-work-card")
        .forEach((card) => observer.observe(card));
    } catch {}
  }

  async function fetchCurrentWork() {
    try {
      const response = await fetch(
        "https://api.github.com/users/dacrab/repos?sort=updated&per_page=20",
      );
      const repos = await response.json();
      const grid = document.getElementById("current-work-grid");
      if (!grid) return;
      grid.innerHTML = "";
      repos
        .filter((r: any) => !r.fork)
        .slice(0, 8)
        .forEach((repo: any) => {
          const el = document.createElement("article");
          el.className = "current-work-card";
          el.innerHTML = `
            <div class="work-header">
              <h4 class="work-title">${repo.name}</h4>
              ${repo.homepage ? `<a href="${repo.homepage}" class="swiss-button swiss-button-sm swiss-button-outline" target="_blank" rel="noopener noreferrer">Live</a>` : ""}
            </div>
            <p class="work-description">${repo.description || "—"}</p>
            <div class="work-topics" aria-label="Topics"></div>
            <div class="work-meta">
              <div class="work-stats">
                <span class="lang" title="Primary language"><span class="dot"></span>${repo.language || "Mixed"}</span>
                ${repo.stargazers_count > 0 ? `<span class="sep">·</span><span class="stars" title="Stars">⭐ ${repo.stargazers_count}</span>` : ""}
              </div>
              <a href="${repo.html_url}" class="swiss-button swiss-button-outline swiss-button-sm" target="_blank" rel="noopener noreferrer">GitHub <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M7 17L17 7M10 7H17V14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></a>
            </div>`;
          grid.appendChild(el);

          // Fetch repository topics for a richer layout
          fetch(repo.url + "/topics", {
            headers: { Accept: "application/vnd.github.mercy-preview+json" },
          })
            .then((r) => (r && r.ok ? r.json() : null))
            .then((data) => {
              if (!data || !Array.isArray(data.names)) return;
              const wrap = el.querySelector(".work-topics");
              if (!wrap) return;
              const topics = data.names.slice(0, 6);
              wrap.innerHTML = topics
                .map((t) => `<span class=\"work-topic u-caps-xs\">${t}</span>`)
                .join("");
            })
            .catch(() => {});
        });
    } catch (err) {
      const grid = document.getElementById("current-work-grid");
      if (grid)
        grid.innerHTML =
          '<p class="error-message">Unable to load current projects. Please try again later.</p>';
    }
  }

  function initGallery() {
    const dialog = document.getElementById("gallery-dialog");
    if (!dialog) return;

    const imageEl = dialog.querySelector("#gd-image");
    const titleEl = dialog.querySelector("#gd-title");
    const metaEl = dialog.querySelector("#gd-meta");
    const indexEl = dialog.querySelector("#gd-index");
    const totalEl = dialog.querySelector("#gd-total");
    const thumbsEl = dialog.querySelector("#gd-thumbs");
    const closeBtn = dialog.querySelector("[data-gd-close]");

    let allImages = [];
    let images = [];
    let activeIndex = 0;
    let prevFocus = null;
    let currentLang = "en";

    function attachEvents() {
      closeBtn?.addEventListener("click", () => closeGallery());
      dialog?.addEventListener("click", (e) => {
        if (e.target === dialog) closeGallery();
      });
      dialog?.addEventListener("cancel", (e) => {
        e.preventDefault();
        closeGallery();
      });

      dialog?.querySelectorAll(".gd-tab")?.forEach((tab) => {
        tab.addEventListener("click", () => {
          const lang = tab.getAttribute("data-lang") || "en";
          switchLanguage(lang);
        });
      });
      document.addEventListener("keydown", (e) => {
        if (!dialog?.open) return;
        if (e.key === "Escape") closeGallery();
        if (e.key === "ArrowRight") go(1);
        if (e.key === "ArrowLeft") go(-1);
        if (e.key === "Tab") trapFocus(e);
      });
    }

    function bindOpeners() {
      document
        .querySelectorAll(".proj-card [data-gallery-open]")
        .forEach((opener) => {
          opener.addEventListener("click", (e) => {
            e.preventDefault();
            const card = opener.closest(".proj-card");
            if (!card) return;
            const title = card.getAttribute("data-title") || "Gallery";
            const meta = card.getAttribute("data-meta") || "";
            let list = [];
            try {
              list = JSON.parse(card.getAttribute("data-gallery") || "[]");
            } catch {}
            if (!Array.isArray(list) || !list.length) return;
            openGallery({ title, meta, list });
          });
        });
    }

    function openGallery({ title, meta, list }) {
      allImages = list.map((m) => ({
        src: m.src || m,
        w: m.w || null,
        h: m.h || null,
      }));
      currentLang = "en";
      filterImagesByLang();
      activeIndex = 0;
      if (titleEl) titleEl.textContent = title;
      if (metaEl) metaEl.textContent = meta;
      updateTabs();
      renderThumbs();
      setImage(0);
      prevFocus = document.activeElement;
      document.body.style.overflow = "hidden";
      dialog?.showModal();
      dialog?.focus();
    }

    function filterImagesByLang() {
      const suffix = `-${currentLang}`;
      images = allImages.filter((img) => (img.src || "").includes(suffix));
      if (!images.length) images = allImages.slice();
    }

    function switchLanguage(lang) {
      currentLang = lang;
      filterImagesByLang();
      activeIndex = 0;
      updateTabs();
      renderThumbs();
      setImage(0);
    }

    function updateTabs() {
      dialog?.querySelectorAll(".gd-tab")?.forEach((tab) => {
        const tabLang = tab.getAttribute("data-lang");
        tab.classList.toggle("active", tabLang === currentLang);
      });
    }

    function getSectionTitleFromSrc(src) {
      const last = (src || "").split("/").pop() || "";
      const clean = last.split("?")[0].split("#")[0];
      const noExt = clean.replace(/\.[^.]+$/, "");
      const noHash = noExt.replace(/\.[a-f0-9]+$/i, "");
      const noLang = noHash.replace(/-(en|el)$/i, "");
      const pretty = noLang.replace(/[-_]+/g, " ").trim();
      return (pretty || "").toUpperCase();
    }

    function setImage(index) {
      if (!images.length || !imageEl) return;
      activeIndex = (index + images.length) % images.length;
      const img = images[activeIndex];
      imageEl.src = img.src;
      imageEl.alt = `${titleEl?.textContent || "Project"} – frame ${activeIndex + 1}`;
      if (indexEl) indexEl.textContent = String(activeIndex + 1);
      if (totalEl) totalEl.textContent = String(images.length);
      updateActiveThumb();
    }

    function renderThumbs() {
      if (!thumbsEl || !images.length) return;
      thumbsEl.innerHTML = "";

      images.forEach((img, index) => {
        const pageName = getSectionTitleFromSrc(img.src);
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "gd-thumb u-caps-xs";
        btn.textContent = pageName;
        btn.setAttribute("aria-label", `Go to ${pageName}`);
        if (index === activeIndex) {
          btn.classList.add("active");
        }
        btn.addEventListener("click", () => setImage(index));
        thumbsEl.appendChild(btn);
      });
    }

    function updateActiveThumb() {
      if (!thumbsEl) return;
      thumbsEl.querySelectorAll(".gd-thumb").forEach((btn, i) => {
        btn.classList.toggle("active", i === activeIndex);
      });
    }

    function go(step) {
      if (!images.length) return;
      setImage(activeIndex + step);
    }

    function trapFocus(e) {
      const focusables = dialog.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
      );
      if (!focusables.length) return;
      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      if (e.shiftKey && document.activeElement === first) {
        last.focus();
        e.preventDefault();
      } else if (!e.shiftKey && document.activeElement === last) {
        first.focus();
        e.preventDefault();
      }
    }

    function closeGallery() {
      if (!dialog?.open) return;
      dialog.close();
      document.body.style.overflow = "";
      if (prevFocus && prevFocus.focus) prevFocus.focus();
    }

    attachEvents();
    bindOpeners();
  }
</script>


