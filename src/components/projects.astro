---
import SectionHeader from './section-header.astro';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Import covers & galleries from src/assets
const gsmImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/gsm/*.png', { eager: true }) as Record<string, { default: ImageMetadata }>;
const argiconImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/argicon/*.png', { eager: true }) as Record<string, { default: ImageMetadata }>;
const designdashImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/designdash/*.png', { eager: true }) as Record<string, { default: ImageMetadata }>;

function toList(record: Record<string, { default: ImageMetadata }>) {
  return Object.values(record).map(v => v.default);
}

const gsmList = toList(gsmImages);
const argiconList = toList(argiconImages);
const designdashList = toList(designdashImages);

function findFirst(record: ImageMetadata[], nameIncludes: string) {
  return record.find(img => (img.src as string).includes(nameIncludes)) ?? record[0];
}

const projects = [
  {
    id: 1,
    slug: 'gsm',
    title: 'Silver and Gold Money',
    meta: 'Bilingual site · Calculators · SvelteKit',
    blurb: 'Trust-forward pawn shop website with interactive tools and a clear, compact UI.',
    tech: ['Svelte', 'SvelteKit', 'TailwindCSS', 'TypeScript'],
    link: 'https://gsm-beta.vercel.app/',
    cover: findFirst(gsmList, 'home-en'),
    gallery: gsmList,
  },
  {
    id: 2,
    slug: 'argicon',
    title: 'Argicon',
    meta: 'Engineering · Next.js · Bilingual',
    blurb: 'Professional services site presenting complex projects with clarity.',
    tech: ['TypeScript', 'NextJS', 'TailwindCSS', 'React'],
    link: 'https://argicon.gr',
    cover: findFirst(argiconList, 'home-en'),
    gallery: argiconList,
  },
  {
    id: 3,
    slug: 'designdash',
    title: 'DesignDash',
    meta: 'Construction platform · Next.js',
    blurb: 'Showcasing construction work with structured galleries and specs.',
    tech: ['TypeScript', 'NextJS', 'TailwindCSS', 'React'],
    link: 'https://designdash.gr',
    cover: findFirst(designdashList, 'home-en'),
    gallery: designdashList,
  },
];
---

<section id="projects" class="swiss-section">
  <div class="swiss-container">
    <SectionHeader
      eyebrow="Selected work"
      title="Projects"
      description="Minimal case cards with quick preview and gallery."
    />

    <div class="proj-grid">
      {projects.map((p) => (
        <article class="proj-card" data-project={p.id}>
          <button class="cover" type="button" data-slug={p.slug} aria-label={`Open ${p.title} screenshots`}>
            <Image src={p.cover} alt={p.title} loading="lazy" widths={[480, 720, 960]} sizes="(max-width: 768px) 100vw, 33vw" style="width: 100%; height: 340px; object-fit: cover; object-position: top; display: block;" />
            <span class="count">{p.gallery.length}</span>
            <div class="ov">
              <h3 class="ov-title">{p.title}</h3>
              <p class="ov-meta">{p.meta}</p>
            </div>
          </button>
          <div class="mini">
            <a href={p.link} target="_blank" rel="noopener noreferrer" class="visit swiss-button swiss-button-outline">Visit</a>
            <button class="gm-open swiss-button swiss-button-primary" type="button" data-slug={p.slug} aria-label={`Open ${p.title} gallery`}>Gallery</button>
          </div>
        </article>
      ))}
    </div>

    <!-- Gallery Modal -->
    <div id="gallery-modal" class="gm" hidden>
      <div class="gm-backdrop" data-close></div>
      <div class="gm-dialog" role="dialog" aria-modal="true" aria-labelledby="gm-title">
        <header class="gm-head">
          <h3 id="gm-title" class="gm-title">Gallery</h3>
          <div class="gm-meta"><span id="gm-counter">0/0</span></div>
          <button class="gm-close" type="button" aria-label="Close" data-close>×</button>
        </header>
        <section class="gm-stage" id="gm-stage" tabindex="0" aria-label="Screenshots"></section>
        <footer class="gm-foot">
          <button class="gm-btn" type="button" id="gm-prev" aria-label="Previous">← Prev</button>
          <button class="gm-btn" type="button" id="gm-next" aria-label="Next">Next →</button>
        </footer>
      </div>
    </div>

    <!-- Galleries payload for client -->
    <script type="application/json" id="galleries-data">{JSON.stringify({
      gsm: gsmList.map(i => ({ src: i.src, w: i.width, h: i.height })),
      argicon: argiconList.map(i => ({ src: i.src, w: i.width, h: i.height })),
      designdash: designdashList.map(i => ({ src: i.src, w: i.width, h: i.height }))
    })}</script>

    <div class="current-work-section">
      <div class="section-divider">
        <div class="divider-line"></div>
        <h3 class="swiss-heading-3">What I'm building now</h3>
        <div class="divider-line"></div>
      </div>
      <div class="current-work-grid" id="current-work-grid">
        <div class="loading-spinner">Fetching latest repositories…</div>
      </div>
    </div>
  </div>

</section>

<style>
  .proj-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: var(--space-7); margin-top: var(--space-9); }
  .proj-card { position: relative; display: grid; gap: var(--space-3); background: var(--color-surface); border: 1px solid var(--color-border); padding: var(--space-4); transition: transform var(--transition-fast), border-color var(--transition-fast), box-shadow var(--transition-fast); overflow: hidden; }
  .proj-card:hover { transform: translateY(-2px); border-color: var(--color-primary); box-shadow: 0 10px 28px rgba(0,0,0,0.08); }

  .cover { position: relative; border: 0; padding: 0; background: transparent; cursor: pointer; text-decoration: none; }
  .cover::after { content: ''; position: absolute; inset: 0; background: linear-gradient(180deg, transparent 40%, rgba(0,0,0,0.55)); opacity: 1; transition: opacity var(--transition-fast); }
  .cover:hover::after { opacity: 1; }
  .cover img, .cover :global(img) { width: 100%; height: 340px; object-fit: cover; object-position: top; display: block; filter: saturate(1.03); }
  .count { position: absolute; top: 8px; right: 8px; background: rgba(0,0,0,0.6); color: #fff; font-size: var(--font-size-xs); padding: 2px 6px; border-radius: 4px; z-index: 1; }

  .ov { position: absolute; left: 0; right: 0; bottom: 0; padding: 12px 14px; display: grid; gap: 4px; z-index: 1; }
  .ov-title { margin: 0; color: #fff; font-weight: 700; }
  .ov-meta { margin: 0; color: rgba(255,255,255,0.85); font-size: var(--font-size-xs); }

  .mini { display: inline-flex; justify-content: space-between; align-items: center; gap: 8px; }
  .visit { text-decoration: none; }

  /* Section ambient */
  #projects { position: relative; }
  #projects::before { content: ''; position: absolute; inset: 0; background: radial-gradient(60% 50% at 15% 20%, rgba(143,188,187,0.08), transparent 60%), radial-gradient(50% 40% at 85% 70%, rgba(180,142,173,0.06), transparent 60%); pointer-events: none; z-index: 0; }

  /* Modal */
  .gm[hidden] { display: none !important; }
  .gm { position: fixed; inset: 0; display: grid; place-items: center; padding: 12px; background: rgba(0,0,0,0.35); backdrop-filter: blur(6px); z-index: var(--z-modal); }
  .gm-backdrop { position: absolute; inset: 0; }
  .gm-dialog { position: relative; width: min(1200px, 96vw); height: min(92dvh, 900px); display: grid; grid-template-rows: auto 1fr auto; background: var(--color-surface); border: 1px solid var(--color-border); box-shadow: 0 20px 60px rgba(0,0,0,0.35); }
  .gm-head { position: sticky; top: 0; z-index: 1; display: grid; grid-template-columns: 1fr auto auto; align-items: center; gap: 8px; padding: 8px 12px; border-bottom: 1px solid var(--color-border); background: rgba(var(--color-background-rgb), 0.9); backdrop-filter: blur(6px); }
  .gm-title { margin: 0; font-size: 0.95rem; }
  .gm-meta { color: var(--color-text-secondary); font-size: var(--font-size-xs); }
  .gm-close { border: 1px solid var(--color-border); background: var(--color-background); padding: 4px 8px; cursor: pointer; }
  .gm-stage { overflow: auto; padding: 12px; display: grid; gap: 12px; background: var(--color-background); }
  .gm-stage figure { margin: 0; display: flex; justify-content: center; }
  .gm-stage img { width: min(100%, 1100px); height: auto; display: block; filter: saturate(1.02); }
  .gm-foot { position: sticky; bottom: 0; display: flex; justify-content: center; gap: 12px; padding: 8px 12px; border-top: 1px solid var(--color-border); background: rgba(var(--color-background-rgb), 0.9); backdrop-filter: blur(6px); }
  .gm-btn { border: 1px solid var(--color-border); background: var(--color-background); padding: 6px 12px; cursor: pointer; }

  @media (max-width: 768px) {
    .gm-dialog { width: 96vw; height: 92dvh; }
  }
</style>

<script>
  class ProjectsController {
    private observer!: IntersectionObserver;

    constructor() { this.init(); }

    init() {
      this.setupObserver();
      this.fetchCurrentWork();
    }

    setupObserver() {
      this.observer = new IntersectionObserver(entries => { entries.forEach(e => { if (e.isIntersecting) e.target.classList.add('animate-in'); }); }, { threshold: 0.1 });
      document.querySelectorAll('.proj-card, .current-work-card').forEach(card => this.observer.observe(card));
    }

    async fetchCurrentWork() {
      try {
        const response = await fetch('https://api.github.com/users/dacrab/repos?sort=updated&per_page=20');
        const repos = await response.json();
        const grid = document.getElementById('current-work-grid');
        if (!grid) return;
        grid.innerHTML = '';
        repos.filter((r: any) => !r.fork).slice(0, 6).forEach((repo: any) => {
          const el = document.createElement('article');
          el.className = 'current-work-card';
          el.innerHTML = `
            <div class=\"work-header\">\n              <h4 class=\"work-title\">${repo.name}</h4>\n              <div class=\"work-stats\">\n                <span class=\"work-language\">${repo.language || 'Mixed'}</span>\n                ${repo.stargazers_count > 0 ? `<span class=\"work-stars\">⭐ ${repo.stargazers_count}</span>` : ''}\n              </div>\n            </div>\n            <p class=\"work-description\">${repo.description || 'No description available'}</p>\n            <div class=\"work-meta\">\n              <span class=\"work-updated\">Updated ${new Date(repo.updated_at).toLocaleDateString()}</span>\n              <a href=\"${repo.html_url}\" class=\"work-link\" target=\"_blank\" rel=\"noopener noreferrer\">View on GitHub →</a>\n            </div>`;
          grid.appendChild(el);
          this.observer.observe(el);
        });
      } catch (err) {
        const grid = document.getElementById('current-work-grid');
        if (grid) grid.innerHTML = '<p class="error-message">Unable to load current projects. Please try again later.</p>';
      }
    }
  }

  const initProjects = () => { if ((window as any).__projectsInit) return; (window as any).__projectsInit = true; new ProjectsController(); };
  document.readyState === 'loading' ? document.addEventListener('DOMContentLoaded', initProjects) : initProjects();
</script>

<script>
  class GalleryModalController {
    private root!: HTMLElement;
    private stage!: HTMLElement;
    private titleEl!: HTMLElement;
    private counterEl!: HTMLElement;
    private nextBtn!: HTMLButtonElement;
    private prevBtn!: HTMLButtonElement;
    private galleries: Record<string, { src: string; w: number; h: number }[]> = {};
    private activeSlug: string | null = null;
    private index: number = 0;

    constructor() { this.init(); }

    init() {
      const dataEl = document.getElementById('galleries-data');
      if (dataEl) {
        try { this.galleries = JSON.parse(dataEl.textContent || '{}'); } catch {}
      }
      this.root = document.getElementById('gallery-modal') as HTMLElement;
      this.stage = document.getElementById('gm-stage') as HTMLElement;
      this.titleEl = document.getElementById('gm-title') as HTMLElement;
      this.counterEl = document.getElementById('gm-counter') as HTMLElement;
      this.nextBtn = document.getElementById('gm-next') as HTMLButtonElement;
      this.prevBtn = document.getElementById('gm-prev') as HTMLButtonElement;

      document.querySelectorAll('.cover[data-slug]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const slug = (e.currentTarget as HTMLElement).getAttribute('data-slug');
          if (slug) this.open(slug);
        });
      });
      document.querySelectorAll('.gm-open[data-slug]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const slug = (e.currentTarget as HTMLElement).getAttribute('data-slug');
          if (slug) this.open(slug);
        });
      });

      this.root?.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.matches('[data-close]')) this.close();
      });

      this.nextBtn?.addEventListener('click', () => this.go(1));
      this.prevBtn?.addEventListener('click', () => this.go(-1));

      window.addEventListener('keydown', (e) => {
        if (this.root.hasAttribute('hidden')) return;
        if (e.key === 'Escape') this.close();
        if (e.key === 'ArrowRight') this.go(1);
        if (e.key === 'ArrowLeft') this.go(-1);
      });
    }

    open(slug: string) {
      const all = this.galleries[slug] || [];
      const en = all.filter(m => /-en[._-]/.test(String(m.src)));
      const imgs = en.length ? en : all;
      if (!imgs.length) return;
      this.activeSlug = slug;
      this.index = 0;
      this.titleEl.textContent = (document.querySelector(`[data-slug="${slug}"]`)?.closest('.proj-card')?.querySelector('.ov-title') as HTMLElement)?.textContent || 'Gallery';
      this.render(imgs);
      document.documentElement.classList.add('modal-open');
      this.root.removeAttribute('hidden');
      this.stage.focus();
      this.updateCounter();
    }

    close() {
      this.root.setAttribute('hidden', '');
      document.documentElement.classList.remove('modal-open');
      this.stage.innerHTML = '';
      this.activeSlug = null;
    }

    render(imgs: { src: string }[]) {
      this.stage.innerHTML = imgs.map((m, i) => `<figure data-idx="${i}"><img src="${m.src}" alt="" loading="lazy" /></figure>`).join('');
    }

    go(step: number) {
      const imgs = this.activeSlug ? this.galleries[this.activeSlug] : [];
      if (!imgs.length) return;
      this.index = Math.max(0, Math.min(imgs.length - 1, this.index + step));
      const el = this.stage.querySelector(`[data-idx="${this.index}"]`) as HTMLElement | null;
      if (el) el.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      this.updateCounter();
    }

    updateCounter() {
      const total = this.activeSlug ? (this.galleries[this.activeSlug]?.length || 0) : 0;
      this.counterEl.textContent = `${this.index + 1}/${total}`;
    }
  }

  // bootstrap
  const initModal = () => { if ((window as any).__galleryModalInit) return; (window as any).__galleryModalInit = true; new GalleryModalController(); };
  document.readyState === 'loading' ? document.addEventListener('DOMContentLoaded', initModal) : initModal();
</script>
