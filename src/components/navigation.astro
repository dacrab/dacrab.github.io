---
const navItems = [
  { label: 'Home', href: '#home' },
  { label: 'About', href: '#about' },
  { label: 'Projects', href: '#projects' },
  { label: 'Contact', href: '#contact' },
];
---

<nav class="nav-min" id="navigation">
  <div class="swiss-container">
    <div class="row">
      <a href="#home" class="brand"><span class="emoji">ðŸ¦€</span> Vaggelis</a>
      <ul class="links">
        {navItems.map(item => (
          <li>
            <a href={item.href} class="link" data-nav-link>{item.label}</a>
          </li>
        ))}
      </ul>
      <button class="theme" id="theme-toggle" aria-label="Toggle theme" aria-pressed="false" title="Toggle theme" data-mode="system">
        <svg class="icon-sun" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/>
          <path d="M12 2v2M12 20v2M4 12H2M22 12h-2M5 5l-1.4-1.4M20.4 20.4 19 19M5 19l-1.4 1.4M20.4 3.6 19 5" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
        <svg class="icon-moon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
        <svg class="icon-system" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <rect x="3" y="4" width="18" height="14" rx="2" stroke="currentColor" stroke-width="2"/>
          <path d="M3 16h18" stroke="currentColor" stroke-width="2"/>
        </svg>
      </button>
    </div>
  </div>
</nav>

<style>
  .nav-min { position: fixed; top: 0; left: 0; right: 0; z-index: var(--z-fixed); background: rgba(var(--color-background-rgb), 0.85); border-bottom: 1px solid transparent; backdrop-filter: blur(8px); transition: all var(--transition-normal); }
  .nav-min.scrolled { background: rgba(var(--color-background-rgb), 0.95); border-bottom-color: var(--color-border); box-shadow: 0 2px 8px rgba(0,0,0,0.04); }
  .row { height: 48px; display: grid; grid-template-columns: 1fr auto auto; align-items: center; gap: var(--space-4); }

  .brand { font-weight: 700; color: var(--color-text); text-decoration: none; display: inline-flex; align-items: center; gap: 8px; letter-spacing: 0.02em; }
  .brand:hover { color: var(--color-primary); }
  .emoji { display: inline-block; }

  .links { display: inline-flex; align-items: center; gap: var(--space-4); list-style: none; margin: 0; padding: 0; }
  .link { font-size: var(--font-size-xs); font-weight: 600; text-transform: uppercase; letter-spacing: 0.06em; color: var(--color-text-secondary); text-decoration: none; padding: 2px 6px; position: relative; }
  .link:hover { color: var(--color-primary); }
  .link.active { color: var(--color-primary); }
  .link.active::after { content: ''; position: absolute; left: 0; right: 0; bottom: -6px; height: 2px; background: var(--color-primary); }

  .theme { border: none; background: transparent; color: var(--color-text-secondary); padding: 4px 6px; cursor: pointer; display: inline-flex; align-items: center; justify-content: center; }
  .theme:hover { color: var(--color-primary); }
  .theme svg { display: none; }
  .theme[data-mode="light"] .icon-sun { display: block; }
  .theme[data-mode="dark"] .icon-moon { display: block; }
  .theme[data-mode="system"] .icon-system { display: block; }

  @media (max-width: 720px) {
    .row { grid-template-columns: 1fr auto; }
    .links { display: none; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    if ((window as any).__navInit) return;
    (window as any).__navInit = true;

    const nav = document.getElementById('navigation');
    const themeToggle = document.getElementById('theme-toggle');
    const navLinks = document.querySelectorAll('[data-nav-link]');

    let scrolled = false;
    let ticking = false;

    function updateNavBackground() {
      const shouldBeScrolled = window.scrollY > 12;
      if (shouldBeScrolled !== scrolled) {
        scrolled = shouldBeScrolled;
        nav?.classList.toggle('scrolled', scrolled);
      }
    }

    function updateActiveLink() {
      const sections = ['#home', '#about', '#projects', '#contact'];
      let current = '#home';
      for (const section of sections) {
        const el = document.querySelector(section);
        if (el && (el as HTMLElement).getBoundingClientRect().top <= 100) current = section;
      }
      navLinks.forEach(link => {
        const isActive = link.getAttribute('href') === current;
        link.classList.toggle('active', isActive);
        if (isActive) link.setAttribute('aria-current', 'page'); else link.removeAttribute('aria-current');
      });
    }

    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateNavBackground();
          updateActiveLink();
          ticking = false;
        });
        ticking = true;
      }
    }

    function applyTheme(theme: 'light' | 'dark' | 'system' | null) {
      const root = document.documentElement;
      if (theme === 'dark' || theme === 'light') root.setAttribute('data-theme', theme);
      else root.removeAttribute('data-theme');
    }
    function getInitialTheme(): 'light' | 'dark' | 'system' {
      const stored = localStorage.getItem('theme') as 'light' | 'dark' | null;
      if (stored === 'light' || stored === 'dark') return stored;
      return 'system';
    }

    let currentTheme: 'light' | 'dark' | 'system' = getInitialTheme();
    applyTheme(currentTheme === 'system' ? null : (currentTheme as 'light' | 'dark'));
    if (themeToggle) {
      themeToggle.setAttribute('data-mode', currentTheme);
      themeToggle.setAttribute('aria-pressed', String(currentTheme !== 'system'));
      (themeToggle as HTMLElement).title = `Theme: ${currentTheme}`;
    }

    themeToggle?.addEventListener('click', () => {
      if (currentTheme === 'system') currentTheme = 'dark';
      else if (currentTheme === 'dark') currentTheme = 'light';
      else currentTheme = 'system';
      localStorage.setItem('theme', currentTheme);
      applyTheme(currentTheme === 'system' ? null : (currentTheme as 'light' | 'dark'));
      themeToggle.setAttribute('data-mode', currentTheme);
      themeToggle.setAttribute('aria-pressed', String(currentTheme !== 'system'));
      (themeToggle as HTMLElement).title = `Theme: ${currentTheme}`;
    });

    navLinks.forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        const href = link.getAttribute('href');
        const target = href ? document.querySelector(href) : null;
        if (target) {
          const navHeight = 48;
          const top = (target as HTMLElement).getBoundingClientRect().top + window.pageYOffset - navHeight;
          window.scrollTo({ top, behavior: 'smooth' });
          setTimeout(() => updateActiveLink(), 100);
        }
      });
    });

    window.addEventListener('scroll', onScroll, { passive: true });
    updateNavBackground();
    updateActiveLink();
  });
</script>
