---
const links = [
  { label: "About", href: "#about" },
  { label: "Projects", href: "#projects" },
  { label: "Contact", href: "#contact" },
];
---

<nav id="navigation" class="nav-swiss" aria-label="Primary">
  <div class="swiss-container nav-row">
    <a href="#home" class="brand" aria-label="Go to home">VAGGELIS KAVOURAS</a>
    <ul class="nav-links" role="list">
      {
        links.map((l) => (
          <li>
            <a href={l.href} class="nav-link" data-nav-link>
              {l.label}
            </a>
          </li>
        ))
      }
    </ul>
    <button
      id="theme-toggle"
      class="theme"
      aria-label="Toggle theme"
      data-mode="system"
    >
      <span class="visually-hidden">Theme</span>
      <svg
        class="icon-sun"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        aria-hidden="true"
        ><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"
        ></circle><path
          d="M12 2v2M12 20v2M4 12H2M22 12h-2M5 5l-1.4-1.4M20.4 20.4 19 19M5 19l-1.4 1.4M20.4 3.6 19 5"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path></svg
      >
      <svg
        class="icon-moon"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        aria-hidden="true"
        ><path
          d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"
          stroke="currentColor"
          stroke-width="2"
          fill="none"></path></svg
      >
      <svg
        class="icon-system"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        aria-hidden="true"
        ><rect
          x="3"
          y="4"
          width="18"
          height="14"
          rx="2"
          stroke="currentColor"
          stroke-width="2"></rect><path
          d="M3 16h18"
          stroke="currentColor"
          stroke-width="2"></path></svg
      >
    </button>
  </div>
</nav>

<style>
  .nav-swiss {
    position: fixed;
    inset: 0 0 auto 0;
    z-index: var(--z-nav);
    background: rgba(var(--color-background-rgb), 0.92);
    border-bottom: 2px solid var(--color-border);
    backdrop-filter: blur(8px) saturate(110%);
    transition:
      background var(--transition-normal),
      border-color var(--transition-normal),
      box-shadow var(--transition-normal);
  }
  .nav-swiss.scrolled {
    background: rgba(var(--color-background-rgb), 0.97);
    border-bottom-color: var(--color-border-strong);
    box-shadow: var(--shadow-sm);
  }
  .nav-row {
    height: 64px;
    display: grid;
    grid-template-columns: 1fr auto auto;
    align-items: center;
    gap: var(--space-6);
  }
  .brand {
    text-decoration: none;
    color: var(--color-text);
    font-weight: 700;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    font-size: var(--font-size-sm);
    transition:
      color var(--transition-normal),
      transform var(--transition-normal);
    display: inline-block;
  }
  .brand:hover {
    color: var(--color-primary);
    transform: scale(1.02);
  }
  .brand:active {
    transform: scale(0.98);
  }
  .nav-links {
    display: inline-flex;
    align-items: center;
    gap: var(--space-6);
    padding: 0;
    list-style: none;
  }
  .nav-link {
    font-size: var(--font-size-xs);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--color-text-secondary);
    text-decoration: none;
    position: relative;
    padding: var(--space-2) 0;
    transition: color var(--transition-normal);
  }
  .nav-link::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: var(--color-primary);
    transform: scaleX(0);
    transition: transform var(--transition-normal);
  }
  .nav-link:hover {
    color: var(--color-text);
  }
  .nav-link[aria-current="page"] {
    color: var(--color-text);
  }
  .nav-link[aria-current="page"]::after {
    transform: scaleX(1);
  }

  .nav-link[aria-current="page"]::before {
    content: "‚óè";
    position: absolute;
    left: -12px;
    color: var(--color-primary);
    font-size: 8px;
    top: 50%;
    transform: translateY(-50%);
  }
  .theme {
    border: 2px solid var(--color-border-strong);
    background: transparent;
    color: var(--color-text-secondary);
    padding: var(--space-2);
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-sm);
    transition:
      color var(--transition-normal),
      border-color var(--transition-normal);
  }
  .theme:hover {
    color: var(--color-text);
    border-color: var(--color-text);
  }
  .theme svg {
    display: none;
  }
  .theme[data-mode="light"] .icon-sun {
    display: block;
  }
  .theme[data-mode="dark"] .icon-moon {
    display: block;
  }
  .theme[data-mode="system"] .icon-system {
    display: block;
  }
  .visually-hidden {
    position: absolute !important;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
    white-space: nowrap;
  }
  @media (max-width: 768px) {
    .nav-row {
      grid-template-columns: 1fr auto;
      gap: var(--space-4);
    }
    .nav-links {
      display: none;
    }
  }
</style>

<script>
  import { scrollToWithOffset } from "@/utils/scroll";
  document.addEventListener("DOMContentLoaded", () => {
    if ((window as any).__navInit) return;
    (window as any).__navInit = true;
    const nav = document.getElementById("navigation");
    const links =
      document.querySelectorAll<HTMLAnchorElement>("[data-nav-link]");
    const theme = document.getElementById(
      "theme-toggle",
    ) as HTMLButtonElement | null;

    // Scroll background
    let ticking = false;
    let scrolled = false;
    const onScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          const s = window.scrollY > 8;
          if (s !== scrolled) {
            scrolled = s;
            nav?.classList.toggle("scrolled", s);
          }
          ticking = false;
        });
        ticking = true;
      }
    };
    window.addEventListener("scroll", onScroll, { passive: true });
    onScroll();

    // Active link via IO
    const sectionIds = ["home", "about", "projects", "contact"] as const;
    const map = new Map<string, HTMLAnchorElement>();
    links.forEach((l) => {
      const href = l.getAttribute("href") || "";
      const id = href.startsWith("#") ? href.slice(1) : href;
      if ((sectionIds as readonly string[]).includes(id)) map.set(id, l);
    });
    let active: string | null = null;
    const setActive = (id: string | null) => {
      if (id === active) return;
      if (active && map.get(active))
        map.get(active)!.removeAttribute("aria-current");
      if (id && map.get(id)) map.get(id)!.setAttribute("aria-current", "page");
      active = id;
    };
    if ("IntersectionObserver" in window) {
      const io = new IntersectionObserver(
        (entries) => {
          const v = entries
            .filter((e) => e.isIntersecting)
            .sort(
              (a, b) => a.boundingClientRect.top - b.boundingClientRect.top,
            );
          if (v.length) {
            setActive((v[0]!.target as Element).id);
          }
        },
        { threshold: 0.1, rootMargin: "-64px 0px -60% 0px" },
      );
      sectionIds.forEach((id) => {
        const el = document.getElementById(id);
        if (el) io.observe(el);
      });
    }

    // Smooth scroll
    links.forEach((a) => {
      a.addEventListener("click", (e) => {
        e.preventDefault();
        const href = a.getAttribute("href");
        const t = href
          ? (document.querySelector(href) as HTMLElement | null)
          : null;
        if (t) scrollToWithOffset(t, 56);
      });
    });

    // Theme toggle
    const apply = (t: "light" | "dark" | null) => {
      const r = document.documentElement;
      if (t) r.setAttribute("data-theme", t);
      else r.removeAttribute("data-theme");
    };
    const getInitial = (): "light" | "dark" | "system" => {
      const s = localStorage.getItem("theme");
      return s === "light" || s === "dark" ? (s as any) : "system";
    };
    let mode: "light" | "dark" | "system" = getInitial();
    apply(mode === "system" ? null : mode);
    if (theme) {
      theme.dataset["mode"] = mode;
      theme.addEventListener("click", () => {
        mode =
          mode === "system" ? "dark" : mode === "dark" ? "light" : "system";
        localStorage.setItem("theme", mode);
        apply(mode === "system" ? null : mode);
        theme.dataset["mode"] = mode;
      });
    }
  });
</script>
