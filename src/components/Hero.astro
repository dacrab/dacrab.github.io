---
// Hero section
---

<section id="home" class="swiss-hero">
  <div class="abstract-shape abstract-shape-1"></div>
  <div class="abstract-shape abstract-shape-2"></div>
  
  <div class="swiss-container">
    <div class="swiss-hero-content asymmetric-grid">
      <div class="swiss-decoration swiss-decoration-line hero-line"></div>
      <div class="swiss-decoration swiss-decoration-square hero-square"></div>
      <div class="swiss-decoration swiss-decoration-circle hero-circle"></div>

      <div class="swiss-hero-text asymmetric-item-1">
        <div class="swiss-hero-label">
          <span class="swiss-caption">
            Welcome <span class="nordic-highlight">â€”</span> explore my work <span class="emoji-bounce">âœ¨</span>
          </span>
        </div>

        <h1 class="swiss-heading-1 swiss-hero-title">
          <span class="hero-title-line">I'm Vaggelis</span>
          <span class="hero-title-line hero-title-secondary">I design and build digital products</span>
        </h1>

        <p class="swiss-body-large swiss-hero-description">
          I build accessible, fast, and reliable web experiences with a focus on clarity and craft. 
          Nordic precision, practical design, and code that scales.
        </p>

        <div class="swiss-hero-actions">
          <a href="#projects" class="swiss-button swiss-button-primary">ðŸŽ¨ View Projects</a>
          
          <div class="cv-dropdown-wrapper">
            <button class="swiss-button swiss-button-outline cv-dropdown-trigger" id="cv-dropdown" aria-haspopup="menu" aria-expanded="false" aria-controls="cv-dropdown-menu">
              ðŸ“„ Download CV
              <span class="dropdown-arrow">â–¼</span>
            </button>
            <div class="cv-dropdown-menu" id="cv-dropdown-menu">
              <a href="/cv/CV_Vaggelis_Kavouras_English.pdf" download class="cv-dropdown-item">
                <span class="cv-flag">ðŸ‡¬ðŸ‡§</span>
                English Version
              </a>
              <a href="/cv/CV_Vaggelis_Kavouras_Greek.pdf" download class="cv-dropdown-item">
                <span class="cv-flag">ðŸ‡¬ðŸ‡·</span>
                Î•Î»Î»Î·Î½Î¹ÎºÎ® ÎˆÎºÎ´Î¿ÏƒÎ·
              </a>
            </div>
          </div>
          
          <a href="#contact" class="swiss-button swiss-button-outline">ðŸ’¬ Get in Touch</a>
        </div>
      </div>

      <div class="swiss-hero-visual asymmetric-item-2">
        <div class="hero-grid">
          <div class="grid-square grid-frost"></div>
          <div class="grid-square grid-purple"></div>
          <div class="grid-square grid-yellow active"></div>
          <div class="grid-square grid-blue"></div>
          <div class="grid-square grid-green"></div>
        </div>
      </div>
    </div>

    <div class="swiss-scroll-indicator">
      <div class="scroll-line"></div>
      <span class="swiss-caption">Scroll</span>
    </div>
  </div>
</section>

<style>
  .hero-line {
    top: 20%;
    right: 10%;
    width: 3px;
    height: 120px;
    transform: rotate(15deg);
    background: var(--nord-frost-2);
    opacity: 0.6;
  }

  .hero-square {
    top: 60%;
    left: 5%;
    width: 25px;
    height: 25px;
    background: var(--nord-aurora-purple);
    opacity: 0.3;
    transform: rotate(45deg);
  }

  .hero-circle {
    bottom: 20%;
    right: 20%;
    width: 30px;
    height: 30px;
    background: var(--nord-aurora-yellow);
    opacity: 0.4;
  }

  .swiss-hero-text {
    z-index: 10;
  }

  .swiss-hero-description {
    max-width: 70ch;
  }

  /* Ensure hero elements start hidden to prevent FOUC and double animations */
  .swiss-hero-text > * {
    opacity: 0;
    transform: translateY(30px);
  }

  .grid-square {
    opacity: 0;
    transform: scale(0.8);
  }

  .hero-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-4);
    opacity: 0.8;
  }

  .grid-frost { background: var(--nord-frost-1); border-radius: 20px; opacity: 0.7; }
  .grid-purple { background: var(--nord-aurora-purple); border-radius: 15px; opacity: 0.6; }
  .grid-yellow { background: var(--nord-aurora-yellow); border-radius: 25px; opacity: 0.8; }
  .grid-blue { background: var(--nord-frost-2); border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; opacity: 0.5; }
  .grid-green { background: var(--nord-aurora-green); border-radius: 12px; opacity: 0.6; }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Guard against double initialization (e.g., during HMR/navigation)
    if ((window as any).__heroInit) return;
    (window as any).__heroInit = true;

    const heroElements = document.querySelectorAll('.swiss-hero-text > *');
    const gridSquares = document.querySelectorAll('.grid-square');
    const cvDropdown = document.getElementById('cv-dropdown');
    const cvDropdownMenu = document.getElementById('cv-dropdown-menu');
    const scrollIndicator = document.querySelector('.swiss-scroll-indicator');
    const shapes = document.querySelectorAll('.abstract-shape');

    // Animate hero text and grid when visible using IntersectionObserver
    const runHeroReveal = () => {
      heroElements.forEach((element, index) => {
        const el = element as HTMLElement;
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        setTimeout(() => {
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        }, index * 200 + 500);
      });

      gridSquares.forEach((square, index) => {
        const el = square as HTMLElement;
        el.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
        setTimeout(() => {
          el.style.opacity = '1';
          el.style.transform = 'scale(1)';
        }, index * 100 + 1000);
      });
    };

    const heroSection = document.getElementById('home');
    if (heroSection) {
      const io = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            runHeroReveal();
            io.disconnect();
          }
        });
      }, { threshold: 0.2, rootMargin: '0px 0px -10% 0px' });
      io.observe(heroSection);
    } else {
      // Fallback
      runHeroReveal();
    }

    // Hero parallax for abstract shapes (respects reduced motion)
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (!reduceMotion && shapes.length) {
      const onMove = (e: MouseEvent) => {
        const cx = window.innerWidth / 2;
        const cy = window.innerHeight / 2;
        const dx = (e.clientX - cx) / cx; // -1..1
        const dy = (e.clientY - cy) / cy; // -1..1
        shapes.forEach((el, i) => {
          const node = el as HTMLElement;
          const strength = 6 + i * 2;
          node.style.transform = `translate(${dx * strength}px, ${dy * strength}px)`;
        });
      };
      window.addEventListener('mousemove', onMove, { passive: true });
    }

    // Random grid activation
    setInterval(() => {
      gridSquares.forEach(square => square.classList.remove('active'));
      const randomIndex = Math.floor(Math.random() * gridSquares.length);
      gridSquares[randomIndex]?.classList.add('active');
    }, 3000);

    // CV Dropdown
    cvDropdown?.addEventListener('click', e => {
      e.preventDefault();
      const willBeActive = !(cvDropdownMenu?.classList.contains('active'));
      cvDropdownMenu?.classList.toggle('active');
      cvDropdown?.setAttribute('aria-expanded', String(willBeActive));
    });

    document.addEventListener('click', e => {
      if (
        cvDropdown && cvDropdownMenu &&
        !cvDropdown.contains(e.target as Node) &&
        !cvDropdownMenu.contains(e.target as Node)
      ) {
        cvDropdownMenu.classList.remove('active');
        cvDropdown.setAttribute('aria-expanded', 'false');
      }
    });

    // Scroll Indicator - Enhanced with smooth scrolling
    scrollIndicator?.addEventListener('click', () => {
      const aboutSection = document.querySelector('#about');
      if (aboutSection) {
        aboutSection.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      }
    });

    // Animate scroll indicator on load
    setTimeout(() => {
      if (scrollIndicator) {
        const el = scrollIndicator as HTMLElement;
        el.style.opacity = '0';
        el.style.transform = 'translateX(-50%) translateY(20px)';
        el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
        
        setTimeout(() => {
          el.style.opacity = '1';
          el.style.transform = 'translateX(-50%) translateY(0)';
        }, 100);
      }
    }, 2000);
  });
</script>
