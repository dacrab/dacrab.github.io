---
// About section with Swiss design principles
---

<section id="about" class="swiss-section">
  <!-- Subtle background elements -->
  <div class="abstract-shape-3"></div>
  
  <div class="swiss-container">
    <!-- Section header - Clean and elegant -->
    <div class="swiss-section-header asymmetric-grid">
      <div class="swiss-section-title asymmetric-item-3">About Me 🌟</div>
      <h2 class="swiss-heading-2 asymmetric-item-1" style="background: linear-gradient(120deg, var(--color-text), var(--nord-frost-4)); background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent;">Where Code Meets Nordic Creativity</h2>
      <p class="swiss-section-description asymmetric-item-2" style="max-width: 90%;">
        I believe great digital experiences happen when Swiss precision meets human intuition — 
        where every pixel has purpose, and every interaction feels just right ✨❄️
      </p>
    </div>

    <!-- About content - Clean Layout -->
    <div class="swiss-about-content asymmetric-grid" style="position: relative;">
      
      <!-- Main about text -->
      <div class="about-text asymmetric-item-1">
        <div class="about-intro" style="margin-bottom: 2rem;">
          <p class="swiss-body-large">
            Hey! I'm Vaggelis 👨‍💻 — a <strong>web developer from Greece</strong> who's obsessed with 
            crafting digital experiences that feel both effortless and delightful. I draw inspiration 
            from Swiss design principles because, honestly, <em>there's something magical about Nordic clarity</em> ✨❄️
          </p>
        </div>

        <div class="about-details creative-grid" style="gap: 2rem;">
          <p class="swiss-body creative-item">
            When I'm not coding, you'll find me exploring new technologies, reading design books, 
            or probably over-engineering a simple side project (because why keep it simple when you 
            can make it beautifully complex? 😅). I believe the best websites feel like they just... work.
          </p>

          <p class="swiss-body creative-item">
            My sweet spot is where <strong>clean code meets thoughtful design</strong> — building things that 
            not only look good but feel intuitive to use. Every line of code and every design decision 
            has a reason, because your users deserve nothing less than excellence 🎯
          </p>
        </div>

        <!-- Skills grid - Creative Layout -->
        <div class="skills-section creative-item">
          <h3 class="swiss-heading-4" style="color: var(--nord-aurora-purple); margin-bottom: 1.5rem;">My Nordic Toolkit ❄️🛠️</h3>
          <div class="skills-grid creative-grid">
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-frost-1), transparent); padding: 1.2rem; border-radius: 16px;">
              <div class="skill-icon">⚛️</div>
              <span>React & Next.js</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-aurora-orange), transparent); padding: 1.2rem; border-radius: 20px;">
              <div class="skill-icon">🚀</div>
              <span>Astro</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-frost-3), transparent); padding: 1.2rem; border-radius: 18px;">
              <div class="skill-icon">💙</div>
              <span>TypeScript</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-aurora-purple), transparent); padding: 1.2rem; border-radius: 22px;">
              <div class="skill-icon">🎨</div>
              <span>CSS Magic & Design Systems</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-aurora-yellow), transparent); padding: 1.2rem; border-radius: 14px;">
              <div class="skill-icon">⚡</div>
              <span>Speed Optimization</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-aurora-green), transparent); padding: 1.2rem; border-radius: 24px;">
              <div class="skill-icon">📱</div>
              <span>Responsive Everything</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-frost-2), transparent); padding: 1.2rem; border-radius: 12px;">
              <div class="skill-icon">❄️</div>
              <span>Nordic Design Principles</span>
            </div>
            <div class="skill-item creative-item" style="background: linear-gradient(135deg, var(--nord-aurora-red), transparent); padding: 1.2rem; border-radius: 26px;">
              <div class="skill-icon">✨</div>
              <span>User Delight</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Visual element -->
      <div class="about-visual">
        <div class="swiss-principles">
          <div class="principle-item">
            <div class="principle-number">01</div>
            <h4 class="principle-title">Clarity 🎯</h4>
            <p class="principle-description">
              Every element has a purpose, every message is crystal clear
            </p>
          </div>
          <div class="principle-item">
            <div class="principle-number">02</div>
            <h4 class="principle-title">Function 🔧</h4>
            <p class="principle-description">
              Beauty emerges from things that work perfectly
            </p>
          </div>
          <div class="principle-item">
            <div class="principle-number">03</div>
            <h4 class="principle-title">Precision ⚡</h4>
            <p class="principle-description">
              The devil's in the details, and so is the magic
            </p>
          </div>
        </div>

        <!-- Decorative Swiss elements -->
        <div class="about-decoration">
          <div class="decoration-grid">
            <div class="grid-cell"></div>
            <div class="grid-cell active"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell active"></div>
            <div class="grid-cell"></div>
          </div>
          <div class="decoration-lines">
            <div class="deco-line"></div>
            <div class="deco-line"></div>
            <div class="deco-line"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Background decorative elements -->
  <div class="swiss-decoration swiss-decoration-line about-line-1"></div>
  <div class="swiss-decoration swiss-decoration-square about-square-1"></div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px 0px -50px 0px',
    };

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);

    // Observe elements for animation
    const animateElements = document.querySelectorAll(
      '.principle-item, .skill-item'
    );
    animateElements.forEach(el => {
      const element = el as HTMLElement;
      element.style.opacity = '0';
      element.style.transform = 'translateY(20px)';
      element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(el);
    });

    // Add animation styles
    const style = document.createElement('style');
    style.textContent = `
      .animate-in {
        opacity: 1 !important;
        transform: translateY(0) !important;
      }
    `;
    document.head.appendChild(style);

    // Animate grid cells
    const gridCells = document.querySelectorAll('.grid-cell');
    let cellIndex = 0;

    setInterval(() => {
      gridCells.forEach(cell => cell.classList.remove('active'));
      gridCells[cellIndex]?.classList.add('active');
      cellIndex = (cellIndex + 1) % gridCells.length;
    }, 2000);
  });
</script>
