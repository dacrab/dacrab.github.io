---
import SectionHeader from './SectionHeader.astro';
// Simplified Projects section with reliable gallery
const projects = [
  {
    id: 1,
    title: '[Demo] Silver and Gold Money ‚ú®',
    subtitle: 'Trust-Building Pawn Shop Experience',
    description:
      'Breaking the stereotypes of pawn shop websites! üíé I created a modern, trustworthy digital experience with bilingual support, interactive calculators, and a clean aesthetic that makes customers feel confident about their transactions.',
    technologies: ['Svelte', 'SvelteKit', 'TailwindCSS', 'TypeScript'],
    link: 'https://gsm-beta.vercel.app/',
    featured: true,
    gallery: [
      { image: '/gsm/home-en.png', title: 'Homepage (English)' },
      { image: '/gsm/home-el.png', title: 'Homepage (Greek)' },
      { image: '/gsm/about-en.png', title: 'About Page (English)' },
      { image: '/gsm/about-el.png', title: 'About Page (Greek)' },
      { image: '/gsm/services-en.png', title: 'Services (English)' },
      { image: '/gsm/services-el.png', title: 'Services (Greek)' },
      { image: '/gsm/loans-en.png', title: 'Loans Calculator (English)' },
      { image: '/gsm/loans-el.png', title: 'Loans Calculator (Greek)' },
      { image: '/gsm/calculator-en.png', title: 'Gold Calculator (English)' },
      { image: '/gsm/calculator-el.png', title: 'Gold Calculator (Greek)' },
      { image: '/gsm/sell-en.png', title: 'Sell Gold/Silver (English)' },
      { image: '/gsm/sell-el.png', title: 'Sell Gold/Silver (Greek)' },
      { image: '/gsm/stores-en.png', title: 'Store Locations (English)' },
      { image: '/gsm/stores-el.png', title: 'Store Locations (Greek)' },
      { image: '/gsm/contact-en.png', title: 'Contact (English)' },
      { image: '/gsm/contact-el.png', title: 'Contact (Greek)' },
    ],
  },
  {
    id: 2,
    title: 'Argicon üèóÔ∏è',
    subtitle: 'Engineering Excellence Website',
    description:
      'When construction meets digital craftsmanship! Built a robust, professional platform that showcases complex engineering projects with clarity and impact. Bilingual design that works as hard as the construction crews üí™',
    technologies: ['TypeScript', 'NextJS', 'TailwindCSS', 'React'],
    link: 'https://argicon.gr',
    featured: true,
    gallery: [
      { image: '/argicon/home-en.png', title: 'Homepage (English)' },
      { image: '/argicon/home-el.png', title: 'Homepage (Greek)' },
      {
        image: '/argicon/projects-en.png',
        title: 'Projects Portfolio (English)',
      },
      {
        image: '/argicon/projects-el.png',
        title: 'Projects Portfolio (Greek)',
      },
      { image: '/argicon/services-en.png', title: 'Services (English)' },
      { image: '/argicon/services-el.png', title: 'Services (Greek)' },
      { image: '/argicon/contact-en.png', title: 'Contact (English)' },
      { image: '/argicon/contact-el.png', title: 'Contact (Greek)' },
    ],
  },
  {
    id: 3,
    title: '[Demo] DesignDash üöÄ',
    subtitle: 'Next-Gen Construction Platform',
    description:
      'Where technical precision meets digital innovation! This comprehensive platform showcases complex engineering projects with beautiful galleries and detailed specifications. Making construction tech accessible and visually stunning üé®',
    technologies: ['TypeScript', 'NextJS', 'TailwindCSS', 'React'],
    link: 'https://designdash.gr',
    featured: true,
    gallery: [
      { image: '/designdash/home-en.png', title: 'Homepage (English)' },
      { image: '/designdash/home-el.png', title: 'Homepage (Greek)' },
      { image: '/designdash/about-en.png', title: 'About (English)' },
      { image: '/designdash/about-el.png', title: 'About (Greek)' },
      { image: '/designdash/projects-en.png', title: 'Projects (English)' },
      { image: '/designdash/projects-el.png', title: 'Projects (Greek)' },
      { image: '/designdash/services-en.png', title: 'Services (English)' },
      { image: '/designdash/services-el.png', title: 'Services (Greek)' },
      { image: '/designdash/contact-en.png', title: 'Contact (English)' },
      { image: '/designdash/contact-el.png', title: 'Contact (Greek)' },
    ],
  },
];
---

<section id="projects" class="swiss-section">
  <!-- Subtle floating elements -->
  <div class="abstract-shape-1"></div>
  <div class="abstract-shape-2"></div>

  <div class="swiss-container">
    <SectionHeader
      eyebrow="My Nordic Work üéØ‚ùÑÔ∏è"
      title="Projects I'm Proud Of"
      description="Here's a glimpse into my creative journey ‚Äî each project tells a story of problem-solving, late-night coding sessions, and the joy of bringing ideas to life with Nordic aesthetics ‚ú®‚ùÑÔ∏è"
      titleClass="projects-gradient"
      eyebrowClass="nordic-work-badge"
    />

    <div class="projects-grid">
      {
        projects.map((project, index) => (
          <article
            class={`project-card project-${index + 1}`}
            data-project-id={project.id}
          >
            <div
              class={`project-content ${index % 2 === 0 ? 'content-left' : 'content-right'}`}
            >
              <div class="project-meta">
                <span class={`project-number number-${index + 1}`}>
                  {String(index + 1).padStart(2, '0')}
                </span>
                <div class="project-tech">
                  {project.technologies.slice(0, 2).map((tech, techIndex) => (
                    <span class={`tech-tag tech-${techIndex + 1}`}>{tech}</span>
                  ))}
                </div>
              </div>

              <div class="project-info">
                <h3 class="project-title">{project.title}</h3>
                <p class={`project-subtitle subtitle-${index + 1}`}>
                  {project.subtitle}
                </p>
                <p class="project-description">{project.description}</p>

                <div class="project-technologies">
                  {project.technologies.map((tech, techIndex) => (
                    <span
                      class={`tech-badge tech-badge-${(techIndex % 4) + 1}`}
                    >
                      {tech}
                    </span>
                  ))}
                </div>

                <div class="project-actions">
                  <a
                    href={project.link}
                    class="swiss-button swiss-button-primary"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    üöÄ See It Live
                  </a>
                  <button
                    class="swiss-button swiss-button-outline open-gallery-btn"
                    data-title={project.title}
                    data-gallery={JSON.stringify(project.gallery)}
                  >
                    üì∏ Browse Gallery ({project.gallery.length})
                  </button>
                </div>
              </div>
            </div>

            <div
              class={`project-image project-image-${index + 1} ${index % 2 === 0 ? 'image-right' : 'image-left'}`}
            >
              <img
                src={project.gallery[0].image}
                alt={project.title}
                loading="lazy"
                class="project-main-image"
              />
              <div class="project-overlay">
                <span class="gallery-count">
                  {project.gallery.length} Nordic Screenshots ‚ùÑÔ∏è
                </span>
              </div>
            </div>
          </article>
        ))
      }
    </div>

    <!-- Current Work Section -->
    <div class="current-work-section">
      <div class="section-divider">
        <div class="divider-line"></div>
        <h3 class="swiss-heading-3">What I'm Building Now üõ†Ô∏è</h3>
        <div class="divider-line"></div>
      </div>

      <div class="current-work-grid" id="current-work-grid">
        <div class="loading-spinner">Fetching my latest experiments... üî¨</div>
      </div>
    </div>
  </div>

  <!-- Enhanced Gallery Modal -->
  <dialog class="gallery-modal" id="gallery-modal">
    <div class="gallery-container">
      <!-- Top Header with Title, Language Switcher & Close -->
      <div class="gallery-header">
        <div class="gallery-project-info">
          <h3 class="gallery-project-title" id="gallery-title">
            Project Gallery
          </h3>
          <span class="gallery-page-counter" id="gallery-counter">1 / 8</span>
        </div>

        <div class="gallery-controls">
          <div class="gallery-language-switcher">
            <button class="lang-btn active" data-lang="en">English</button>
            <button class="lang-btn" data-lang="gr">Greek</button>
          </div>
          <button class="gallery-close-btn" id="gallery-close">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>

      <!-- Main Image Area (Scrollable) -->
      <div class="gallery-main-container">
        <div class="gallery-image-container">
          <img
            id="main-gallery-image"
            src=""
            alt=""
            class="gallery-main-image"
          />
        </div>

        <!-- Navigation arrows -->
        <button class="gallery-nav-btn gallery-prev" id="gallery-prev">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="gallery-nav-btn gallery-next" id="gallery-next">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>

      <!-- Bottom Page Navigation -->
      <div class="gallery-page-navigation">
        <div class="gallery-page-buttons" id="gallery-page-buttons">
          <!-- Page buttons will be populated here -->
        </div>
      </div>
    </div>
  </dialog>

  <!-- Background decorations -->
  <div class="swiss-decoration swiss-decoration-line projects-line-1"></div>
  <div class="swiss-decoration swiss-decoration-circle projects-circle-1"></div>
</section>

<script>
  // Projects gallery - refactored and simplified
  type GalleryItem = { image: string; title?: string };

  class ProjectsController {
    private currentProjectTitle = '';
    private currentLanguage: 'en' | 'gr' = 'en';
    private currentImageIndex = 0;
    private allImages: GalleryItem[] = [];
    private filteredImages: GalleryItem[] = [];
    private observer!: IntersectionObserver;

    constructor() {
      this.init();
    }

    init() {
      this.setupGallery();
      this.setupObserver();
      this.fetchCurrentWork();
    }

    setupGallery() {
      const galleryButtons = document.querySelectorAll('.open-gallery-btn');
      galleryButtons.forEach(button => {
        button.addEventListener('click', () => {
          const title = button.getAttribute('data-title') || 'Project Gallery';
          const raw = button.getAttribute('data-gallery') || '[]';
          try {
            const imagesRaw = JSON.parse(raw);
            const images: GalleryItem[] = Array.isArray(imagesRaw)
              ? imagesRaw.map((it: any) => ({
                  image: it.image ?? it.src ?? '',
                  title: it.title,
                }))
              : [];
            this.openGallery(title, images);
          } catch (e) {
            console.error('Failed to parse gallery data');
          }
        });
      });

      this.setupGalleryEvents();
    }

    setupGalleryEvents() {
      const modal = document.getElementById(
        'gallery-modal'
      ) as HTMLDialogElement;
      const modalClose = document.getElementById('gallery-close');
      const prevBtn = document.getElementById('gallery-prev');
      const nextBtn = document.getElementById('gallery-next');
      const langButtons = document.querySelectorAll('.lang-btn');

      modalClose?.addEventListener('click', () => this.closeGallery());
      modal?.addEventListener('click', e => {
        if (e.target === modal) this.closeGallery();
      });

      prevBtn?.addEventListener('click', () => this.navigatePrevious());
      nextBtn?.addEventListener('click', () => this.navigateNext());

      langButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const lang = btn.getAttribute('data-lang') as 'en' | 'gr';
          if (lang && lang !== this.currentLanguage) {
            this.switchLanguage(lang);
          }
        });
      });

      document.addEventListener('keydown', e => {
        if (modal?.hasAttribute('open')) {
          switch (e.key) {
            case 'Escape':
              this.closeGallery();
              break;
            case 'ArrowLeft':
              this.navigatePrevious();
              break;
            case 'ArrowRight':
              this.navigateNext();
              break;
          }
        }
      });
    }

    openGallery(title: string, images: GalleryItem[]) {
      this.currentProjectTitle = title;
      this.allImages = images;
      this.currentLanguage = 'en';
      this.currentImageIndex = 0;

      const modal = document.getElementById(
        'gallery-modal'
      ) as HTMLDialogElement;
      const modalTitle = document.getElementById('gallery-title');

      if (modalTitle) modalTitle.textContent = title;

      this.resetLanguageButtons();
      this.updateGalleryContent();

      if (modal) {
        modal.showModal();
        document.body.style.overflow = 'hidden';
      }
    }

    closeGallery() {
      const modal = document.getElementById(
        'gallery-modal'
      ) as HTMLDialogElement;
      if (modal) {
        modal.close();
        document.body.style.overflow = 'auto';
      }
      this.reset();
    }

    switchLanguage(lang: 'en' | 'gr') {
      this.currentLanguage = lang;
      this.currentImageIndex = 0;

      const langButtons = document.querySelectorAll('.lang-btn');
      langButtons.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-lang') === lang);
      });

      this.updateGalleryContent();
    }

    updateGalleryContent() {
      this.filteredImages = this.filterImagesByLanguage(
        this.allImages,
        this.currentLanguage
      );

      if (this.currentImageIndex >= this.filteredImages.length) {
        this.currentImageIndex = 0;
      }

      if (this.filteredImages.length > 0) {
        this.setMainImage(this.filteredImages[this.currentImageIndex]);
      }

      this.updateCounter();
      this.createPageButtons();
      this.updateNavigationButtons();
    }

    filterImagesByLanguage(
      images: GalleryItem[],
      lang: 'en' | 'gr'
    ): GalleryItem[] {
      const langSuffix = lang === 'en' ? '-en.' : '-el.';
      return images.filter(img => img.image.includes(langSuffix));
    }

    setMainImage(item: GalleryItem) {
      const mainImage = document.getElementById(
        'main-gallery-image'
      ) as HTMLImageElement;
      if (mainImage) {
        mainImage.src = item.image;
        mainImage.alt = item.title || this.extractPageName(item.image);
      }
    }

    extractPageName(imagePath: string): string {
      const filename = imagePath.split('/').pop() || '';
      const pageName = filename.split('-')[0];
      return pageName.charAt(0).toUpperCase() + pageName.slice(1);
    }

    updateCounter() {
      const modalCounter = document.getElementById('gallery-counter');
      if (modalCounter) {
        modalCounter.textContent = `${this.currentImageIndex + 1} / ${this.filteredImages.length}`;
      }
    }

    createPageButtons() {
      const container = document.getElementById('gallery-page-buttons');
      if (!container) return;

      container.innerHTML = '';
      this.filteredImages.forEach((image, index) => {
        const btn = document.createElement('button');
        btn.className = `gallery-page-btn ${index === this.currentImageIndex ? 'active' : ''}`;
        btn.textContent = this.extractPageName(image.image);
        btn.addEventListener('click', () => this.goToImage(index));
        container.appendChild(btn);
      });
    }

    goToImage(index: number) {
      this.currentImageIndex = index;
      this.setMainImage(this.filteredImages[index]);
      this.updateCounter();
      this.updatePageButtons();
      this.updateNavigationButtons();
    }

    updatePageButtons() {
      const buttons = document.querySelectorAll('.gallery-page-btn');
      buttons.forEach((btn, index) => {
        btn.classList.toggle('active', index === this.currentImageIndex);
      });
    }

    updateNavigationButtons() {
      const prevBtn = document.getElementById(
        'gallery-prev'
      ) as HTMLButtonElement;
      const nextBtn = document.getElementById(
        'gallery-next'
      ) as HTMLButtonElement;

      if (prevBtn) prevBtn.disabled = this.currentImageIndex === 0;
      if (nextBtn)
        nextBtn.disabled =
          this.currentImageIndex === this.filteredImages.length - 1;
    }

    navigatePrevious() {
      if (this.currentImageIndex > 0) {
        this.goToImage(this.currentImageIndex - 1);
      }
    }

    navigateNext() {
      if (this.currentImageIndex < this.filteredImages.length - 1) {
        this.goToImage(this.currentImageIndex + 1);
      }
    }

    resetLanguageButtons() {
      const langButtons = document.querySelectorAll('.lang-btn');
      langButtons.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-lang') === 'en');
      });
    }

    setupObserver() {
      this.observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-in');
            }
          });
        },
        { threshold: 0.1 }
      );

      document
        .querySelectorAll('.project-card, .current-work-card')
        .forEach(card => {
          this.observer.observe(card);
        });
    }

    async fetchCurrentWork() {
      try {
        const response = await fetch(
          'https://api.github.com/users/dacrab/repos?sort=updated&per_page=20'
        );
        const repos = await response.json();
        const currentWorkGrid = document.getElementById('current-work-grid');

        if (!currentWorkGrid) return;

        currentWorkGrid.innerHTML = '';
        const nonForkedRepos = repos.filter((repo: any) => !repo.fork);

        nonForkedRepos.slice(0, 6).forEach((repo: any) => {
          const repoCard = document.createElement('article');
          repoCard.className = 'current-work-card';
          repoCard.innerHTML = `
            <div class="work-header">
              <h4 class="work-title">${repo.name}</h4>
              <div class="work-stats">
                <span class="work-language">${repo.language || 'Mixed'}</span>
                ${repo.stargazers_count > 0 ? `<span class="work-stars">‚≠ê ${repo.stargazers_count}</span>` : ''}
              </div>
            </div>
            <p class="work-description">${repo.description || 'No description available'}</p>
            <div class="work-meta">
              <span class="work-updated">Updated ${new Date(repo.updated_at).toLocaleDateString()}</span>
              <a href="${repo.html_url}" class="work-link" target="_blank" rel="noopener noreferrer">
                View on GitHub ‚Üí
              </a>
            </div>
          `;
          currentWorkGrid.appendChild(repoCard);
          this.observer.observe(repoCard);
        });
      } catch (error) {
        console.error('Failed to fetch current work:', error);
        const currentWorkGrid = document.getElementById('current-work-grid');
        if (currentWorkGrid) {
          currentWorkGrid.innerHTML =
            '<p class="error-message">Unable to load current projects. Please try again later.</p>';
        }
      }
    }

    reset() {
      this.currentProjectTitle = '';
      this.allImages = [];
      this.filteredImages = [];
    }
  }

  // Initialize when DOM is ready
  document.readyState === 'loading'
    ? document.addEventListener(
        'DOMContentLoaded',
        () => new ProjectsController()
      )
    : new ProjectsController();
</script>
